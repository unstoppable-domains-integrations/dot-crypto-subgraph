// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NewURI extends ethereum.Event {
  get params(): NewURI__Params {
    return new NewURI__Params(this);
  }
}

export class NewURI__Params {
  _event: NewURI;

  constructor(event: NewURI) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class NewURIPrefix extends ethereum.Event {
  get params(): NewURIPrefix__Params {
    return new NewURIPrefix__Params(this);
  }
}

export class NewURIPrefix__Params {
  _event: NewURIPrefix;

  constructor(event: NewURIPrefix) {
    this._event = event;
  }

  get prefix(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class Resolve extends ethereum.Event {
  get params(): Resolve__Params {
    return new Resolve__Params(this);
  }
}

export class Resolve__Params {
  _event: Resolve;

  constructor(event: Resolve) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sync extends ethereum.Event {
  get params(): Sync__Params {
    return new Sync__Params(this);
  }
}

export class Sync__Params {
  _event: Sync;

  constructor(event: Sync) {
    this._event = event;
  }

  get resolver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get updateId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Registry extends ethereum.SmartContract {
  static bind(address: Address): Registry {
    return new Registry("Registry", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  childIdOf(tokenId: BigInt, label: string): BigInt {
    let result = super.call(
      "childIdOf",
      "childIdOf(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(label)
      ]
    );

    return result[0].toBigInt();
  }

  try_childIdOf(tokenId: BigInt, label: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "childIdOf",
      "childIdOf(uint256,string):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromString(label)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedOrOwner(spender: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedOrOwner(
    spender: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedOrOwner",
      "isApprovedOrOwner(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isController(account: Address): boolean {
    let result = super.call("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isController(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isController", "isController(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolverOf(tokenId: BigInt): Address {
    let result = super.call("resolverOf", "resolverOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_resolverOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("resolverOf", "resolverOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  root(): BigInt {
    let result = super.call("root", "root():(uint256)", []);

    return result[0].toBigInt();
  }

  try_root(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("root", "root():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddControllerCall extends ethereum.Call {
  get inputs(): AddControllerCall__Inputs {
    return new AddControllerCall__Inputs(this);
  }

  get outputs(): AddControllerCall__Outputs {
    return new AddControllerCall__Outputs(this);
  }
}

export class AddControllerCall__Inputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddControllerCall__Outputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnChildCall extends ethereum.Call {
  get inputs(): BurnChildCall__Inputs {
    return new BurnChildCall__Inputs(this);
  }

  get outputs(): BurnChildCall__Outputs {
    return new BurnChildCall__Outputs(this);
  }
}

export class BurnChildCall__Inputs {
  _call: BurnChildCall;

  constructor(call: BurnChildCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class BurnChildCall__Outputs {
  _call: BurnChildCall;

  constructor(call: BurnChildCall) {
    this._call = call;
  }
}

export class ControlledBurnCall extends ethereum.Call {
  get inputs(): ControlledBurnCall__Inputs {
    return new ControlledBurnCall__Inputs(this);
  }

  get outputs(): ControlledBurnCall__Outputs {
    return new ControlledBurnCall__Outputs(this);
  }
}

export class ControlledBurnCall__Inputs {
  _call: ControlledBurnCall;

  constructor(call: ControlledBurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ControlledBurnCall__Outputs {
  _call: ControlledBurnCall;

  constructor(call: ControlledBurnCall) {
    this._call = call;
  }
}

export class ControlledMintChildCall extends ethereum.Call {
  get inputs(): ControlledMintChildCall__Inputs {
    return new ControlledMintChildCall__Inputs(this);
  }

  get outputs(): ControlledMintChildCall__Outputs {
    return new ControlledMintChildCall__Outputs(this);
  }
}

export class ControlledMintChildCall__Inputs {
  _call: ControlledMintChildCall;

  constructor(call: ControlledMintChildCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ControlledMintChildCall__Outputs {
  _call: ControlledMintChildCall;

  constructor(call: ControlledMintChildCall) {
    this._call = call;
  }
}

export class ControlledResolveToCall extends ethereum.Call {
  get inputs(): ControlledResolveToCall__Inputs {
    return new ControlledResolveToCall__Inputs(this);
  }

  get outputs(): ControlledResolveToCall__Outputs {
    return new ControlledResolveToCall__Outputs(this);
  }
}

export class ControlledResolveToCall__Inputs {
  _call: ControlledResolveToCall;

  constructor(call: ControlledResolveToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ControlledResolveToCall__Outputs {
  _call: ControlledResolveToCall;

  constructor(call: ControlledResolveToCall) {
    this._call = call;
  }
}

export class ControlledSafeMintChildCall extends ethereum.Call {
  get inputs(): ControlledSafeMintChildCall__Inputs {
    return new ControlledSafeMintChildCall__Inputs(this);
  }

  get outputs(): ControlledSafeMintChildCall__Outputs {
    return new ControlledSafeMintChildCall__Outputs(this);
  }
}

export class ControlledSafeMintChildCall__Inputs {
  _call: ControlledSafeMintChildCall;

  constructor(call: ControlledSafeMintChildCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ControlledSafeMintChildCall__Outputs {
  _call: ControlledSafeMintChildCall;

  constructor(call: ControlledSafeMintChildCall) {
    this._call = call;
  }
}

export class ControlledSafeTransferFromCall extends ethereum.Call {
  get inputs(): ControlledSafeTransferFromCall__Inputs {
    return new ControlledSafeTransferFromCall__Inputs(this);
  }

  get outputs(): ControlledSafeTransferFromCall__Outputs {
    return new ControlledSafeTransferFromCall__Outputs(this);
  }
}

export class ControlledSafeTransferFromCall__Inputs {
  _call: ControlledSafeTransferFromCall;

  constructor(call: ControlledSafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ControlledSafeTransferFromCall__Outputs {
  _call: ControlledSafeTransferFromCall;

  constructor(call: ControlledSafeTransferFromCall) {
    this._call = call;
  }
}

export class ControlledSetTokenURIPrefixCall extends ethereum.Call {
  get inputs(): ControlledSetTokenURIPrefixCall__Inputs {
    return new ControlledSetTokenURIPrefixCall__Inputs(this);
  }

  get outputs(): ControlledSetTokenURIPrefixCall__Outputs {
    return new ControlledSetTokenURIPrefixCall__Outputs(this);
  }
}

export class ControlledSetTokenURIPrefixCall__Inputs {
  _call: ControlledSetTokenURIPrefixCall;

  constructor(call: ControlledSetTokenURIPrefixCall) {
    this._call = call;
  }

  get prefix(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ControlledSetTokenURIPrefixCall__Outputs {
  _call: ControlledSetTokenURIPrefixCall;

  constructor(call: ControlledSetTokenURIPrefixCall) {
    this._call = call;
  }
}

export class ControlledTransferFromCall extends ethereum.Call {
  get inputs(): ControlledTransferFromCall__Inputs {
    return new ControlledTransferFromCall__Inputs(this);
  }

  get outputs(): ControlledTransferFromCall__Outputs {
    return new ControlledTransferFromCall__Outputs(this);
  }
}

export class ControlledTransferFromCall__Inputs {
  _call: ControlledTransferFromCall;

  constructor(call: ControlledTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ControlledTransferFromCall__Outputs {
  _call: ControlledTransferFromCall;

  constructor(call: ControlledTransferFromCall) {
    this._call = call;
  }
}

export class MintChildCall extends ethereum.Call {
  get inputs(): MintChildCall__Inputs {
    return new MintChildCall__Inputs(this);
  }

  get outputs(): MintChildCall__Outputs {
    return new MintChildCall__Outputs(this);
  }
}

export class MintChildCall__Inputs {
  _call: MintChildCall;

  constructor(call: MintChildCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MintChildCall__Outputs {
  _call: MintChildCall;

  constructor(call: MintChildCall) {
    this._call = call;
  }
}

export class RenounceControllerCall extends ethereum.Call {
  get inputs(): RenounceControllerCall__Inputs {
    return new RenounceControllerCall__Inputs(this);
  }

  get outputs(): RenounceControllerCall__Outputs {
    return new RenounceControllerCall__Outputs(this);
  }
}

export class RenounceControllerCall__Inputs {
  _call: RenounceControllerCall;

  constructor(call: RenounceControllerCall) {
    this._call = call;
  }
}

export class RenounceControllerCall__Outputs {
  _call: RenounceControllerCall;

  constructor(call: RenounceControllerCall) {
    this._call = call;
  }
}

export class ResolveToCall extends ethereum.Call {
  get inputs(): ResolveToCall__Inputs {
    return new ResolveToCall__Inputs(this);
  }

  get outputs(): ResolveToCall__Outputs {
    return new ResolveToCall__Outputs(this);
  }
}

export class ResolveToCall__Inputs {
  _call: ResolveToCall;

  constructor(call: ResolveToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ResolveToCall__Outputs {
  _call: ResolveToCall;

  constructor(call: ResolveToCall) {
    this._call = call;
  }
}

export class SafeMintChildCall extends ethereum.Call {
  get inputs(): SafeMintChildCall__Inputs {
    return new SafeMintChildCall__Inputs(this);
  }

  get outputs(): SafeMintChildCall__Outputs {
    return new SafeMintChildCall__Outputs(this);
  }
}

export class SafeMintChildCall__Inputs {
  _call: SafeMintChildCall;

  constructor(call: SafeMintChildCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SafeMintChildCall__Outputs {
  _call: SafeMintChildCall;

  constructor(call: SafeMintChildCall) {
    this._call = call;
  }
}

export class SafeMintChild1Call extends ethereum.Call {
  get inputs(): SafeMintChild1Call__Inputs {
    return new SafeMintChild1Call__Inputs(this);
  }

  get outputs(): SafeMintChild1Call__Outputs {
    return new SafeMintChild1Call__Outputs(this);
  }
}

export class SafeMintChild1Call__Inputs {
  _call: SafeMintChild1Call;

  constructor(call: SafeMintChild1Call) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeMintChild1Call__Outputs {
  _call: SafeMintChild1Call;

  constructor(call: SafeMintChild1Call) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SafeTransferFromChildCall extends ethereum.Call {
  get inputs(): SafeTransferFromChildCall__Inputs {
    return new SafeTransferFromChildCall__Inputs(this);
  }

  get outputs(): SafeTransferFromChildCall__Outputs {
    return new SafeTransferFromChildCall__Outputs(this);
  }
}

export class SafeTransferFromChildCall__Inputs {
  _call: SafeTransferFromChildCall;

  constructor(call: SafeTransferFromChildCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class SafeTransferFromChildCall__Outputs {
  _call: SafeTransferFromChildCall;

  constructor(call: SafeTransferFromChildCall) {
    this._call = call;
  }
}

export class SafeTransferFromChild1Call extends ethereum.Call {
  get inputs(): SafeTransferFromChild1Call__Inputs {
    return new SafeTransferFromChild1Call__Inputs(this);
  }

  get outputs(): SafeTransferFromChild1Call__Outputs {
    return new SafeTransferFromChild1Call__Outputs(this);
  }
}

export class SafeTransferFromChild1Call__Inputs {
  _call: SafeTransferFromChild1Call;

  constructor(call: SafeTransferFromChild1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromChild1Call__Outputs {
  _call: SafeTransferFromChild1Call;

  constructor(call: SafeTransferFromChild1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SyncCall extends ethereum.Call {
  get inputs(): SyncCall__Inputs {
    return new SyncCall__Inputs(this);
  }

  get outputs(): SyncCall__Outputs {
    return new SyncCall__Outputs(this);
  }
}

export class SyncCall__Inputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get updateId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SyncCall__Outputs {
  _call: SyncCall;

  constructor(call: SyncCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferFromChildCall extends ethereum.Call {
  get inputs(): TransferFromChildCall__Inputs {
    return new TransferFromChildCall__Inputs(this);
  }

  get outputs(): TransferFromChildCall__Outputs {
    return new TransferFromChildCall__Outputs(this);
  }
}

export class TransferFromChildCall__Inputs {
  _call: TransferFromChildCall;

  constructor(call: TransferFromChildCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get label(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class TransferFromChildCall__Outputs {
  _call: TransferFromChildCall;

  constructor(call: TransferFromChildCall) {
    this._call = call;
  }
}

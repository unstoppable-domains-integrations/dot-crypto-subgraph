type Domain @entity {
  id: ID! # The namehash of domain
  name: String # The human readable name
  owner: Account!
  resolver: Resolver
  createdAt: BigInt!
  events: [DomainEvent!]! @derivedFrom(field: "domain")
}

interface DomainEvent {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
}

type Transfer implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  owner: Account!
}

type Resolve implements DomainEvent @entity {
  id: ID!
  domain: Domain!
  blockNumber: Int!
  transactionID: Bytes!
  to: Resolver!
}

type Account @entity {
  id: ID!
  domains: [Domain!]! @derivedFrom(field: "owner")
}

type Resolver @entity {
  id: ID! # Concatenation of resolver address and namehash
  domain: Domain
  address: Bytes! # Address of resolver contract
  records: [Record!] @derivedFrom(field: "resolver")
  events: [ResolverEvent!]! @derivedFrom(field: "resolver")
}

interface ResolverEvent {
  id: ID! # Concatenation of block number and log ID
  resolver: Resolver! # Used to derive relationships to Resolvers
  blockNumber: Int!
  transactionID: Bytes!
}

type Set implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
  key: String!
  value: String!
}

type ResetRecord implements ResolverEvent @entity {
  id: ID!
  resolver: Resolver!
  blockNumber: Int!
  transactionID: Bytes!
}

type Record @entity {
  id: ID! # Concatenation of namehash and key
  resolver: Resolver
  key: String!
  value: String!
}
